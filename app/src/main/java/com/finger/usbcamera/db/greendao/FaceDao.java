package com.finger.usbcamera.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.finger.usbcamera.db.entity.Face;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FACE".
*/
public class FaceDao extends AbstractDao<Face, Long> {

    public static final String TABLENAME = "FACE";

    /**
     * Properties of entity Face.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property PersonId = new Property(1, Long.class, "personId", false, "person_id");
        public final static Property CenterImage = new Property(2, byte[].class, "centerImage", false, "center_image");
        public final static Property LeftImage = new Property(3, byte[].class, "leftImage", false, "left_image");
        public final static Property RightImage = new Property(4, byte[].class, "rightImage", false, "right_image");
        public final static Property CreateDate = new Property(5, java.util.Date.class, "createDate", false, "create_date");
    }


    public FaceDao(DaoConfig config) {
        super(config);
    }
    
    public FaceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FACE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"person_id\" INTEGER," + // 1: personId
                "\"center_image\" BLOB," + // 2: centerImage
                "\"left_image\" BLOB," + // 3: leftImage
                "\"right_image\" BLOB," + // 4: rightImage
                "\"create_date\" INTEGER);"); // 5: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FACE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Face entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindLong(2, personId);
        }
 
        byte[] centerImage = entity.getCenterImage();
        if (centerImage != null) {
            stmt.bindBlob(3, centerImage);
        }
 
        byte[] leftImage = entity.getLeftImage();
        if (leftImage != null) {
            stmt.bindBlob(4, leftImage);
        }
 
        byte[] rightImage = entity.getRightImage();
        if (rightImage != null) {
            stmt.bindBlob(5, rightImage);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(6, createDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Face entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindLong(2, personId);
        }
 
        byte[] centerImage = entity.getCenterImage();
        if (centerImage != null) {
            stmt.bindBlob(3, centerImage);
        }
 
        byte[] leftImage = entity.getLeftImage();
        if (leftImage != null) {
            stmt.bindBlob(4, leftImage);
        }
 
        byte[] rightImage = entity.getRightImage();
        if (rightImage != null) {
            stmt.bindBlob(5, rightImage);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(6, createDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Face readEntity(Cursor cursor, int offset) {
        Face entity = new Face( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // personId
            cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2), // centerImage
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // leftImage
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // rightImage
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Face entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCenterImage(cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2));
        entity.setLeftImage(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setRightImage(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Face entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Face entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Face entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
