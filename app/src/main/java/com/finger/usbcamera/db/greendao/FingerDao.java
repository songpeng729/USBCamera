package com.finger.usbcamera.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.finger.usbcamera.db.entity.Finger;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FINGER".
*/
public class FingerDao extends AbstractDao<Finger, String> {

    public static final String TABLENAME = "FINGER";

    /**
     * Properties of entity Finger.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "id");
        public final static Property PersonId = new Property(1, String.class, "personId", false, "person_id");
        public final static Property Fgp = new Property(2, int.class, "fgp", false, "fgp");
        public final static Property IsFlat = new Property(3, boolean.class, "isFlat", false, "is_flat");
        public final static Property ImgData = new Property(4, byte[].class, "imgData", false, "img_data");
        public final static Property MntData = new Property(5, byte[].class, "mntData", false, "mnt_data");
        public final static Property CreateDate = new Property(6, java.util.Date.class, "createDate", false, "create_date");
    }


    public FingerDao(DaoConfig config) {
        super(config);
    }
    
    public FingerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FINGER\" (" + //
                "\"id\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"person_id\" TEXT," + // 1: personId
                "\"fgp\" INTEGER NOT NULL ," + // 2: fgp
                "\"is_flat\" INTEGER NOT NULL ," + // 3: isFlat
                "\"img_data\" BLOB," + // 4: imgData
                "\"mnt_data\" BLOB," + // 5: mntData
                "\"create_date\" INTEGER);"); // 6: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FINGER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Finger entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(2, personId);
        }
        stmt.bindLong(3, entity.getFgp());
        stmt.bindLong(4, entity.getIsFlat() ? 1L: 0L);
 
        byte[] imgData = entity.getImgData();
        if (imgData != null) {
            stmt.bindBlob(5, imgData);
        }
 
        byte[] mntData = entity.getMntData();
        if (mntData != null) {
            stmt.bindBlob(6, mntData);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(7, createDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Finger entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(2, personId);
        }
        stmt.bindLong(3, entity.getFgp());
        stmt.bindLong(4, entity.getIsFlat() ? 1L: 0L);
 
        byte[] imgData = entity.getImgData();
        if (imgData != null) {
            stmt.bindBlob(5, imgData);
        }
 
        byte[] mntData = entity.getMntData();
        if (mntData != null) {
            stmt.bindBlob(6, mntData);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(7, createDate.getTime());
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Finger readEntity(Cursor cursor, int offset) {
        Finger entity = new Finger( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personId
            cursor.getInt(offset + 2), // fgp
            cursor.getShort(offset + 3) != 0, // isFlat
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // imgData
            cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5), // mntData
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Finger entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPersonId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFgp(cursor.getInt(offset + 2));
        entity.setIsFlat(cursor.getShort(offset + 3) != 0);
        entity.setImgData(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setMntData(cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5));
        entity.setCreateDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Finger entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Finger entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Finger entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
